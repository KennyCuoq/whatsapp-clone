<%= render 'chats/navbar_send' %>
<div class="container container-messages">
  <% @chat.sort_chronologically.each do |message| %>
    <% was_sent_by_user = (message.sender == @user)%>
    <%= render 'messages/message', message: message, was_sent_by_user: was_sent_by_user %>
  <% end %>
</div>
  <%= render 'chats/footer_send' %>

<% content_for :after_js do %>
  <script>
    function sendMessageInAjax() {
      const input = document.getElementById('redaction-bar');
      const messageContent = input.value;
      input.value = '';
      input.focus();
      const messageInput = document.getElementById('message_content');
      messageInput.value = messageContent;
    };

    document.querySelector(".submit-message").addEventListener("click", sendMessageInAjax);



    //////////
    // Subscribe to chat channel and deal with when user receive a message from contact
    function removePreviousBubbleArrow() {
      const allMessages = document.querySelectorAll('.bubble')
      const lastMessage = allMessages[allMessages.length-1]
      if (!lastMessage.classList.contains('sent')) {
        const bubbleArrow = lastMessage.lastElementChild;
        bubbleArrow.remove();
      }
    }

    scrollLastMessageIntoView();

    App['chat_<%= @chat.id %>'] = App.cable.subscriptions.create({ channel: 'ChatsChannel', chat_id: <%= @chat.id %> }, {
      received: (data) => {
        if (data.current_user_id !== <%= @user.id %>) {
          const messagesContainer = document.querySelector('.container-messages');
          removePreviousBubbleArrow();
          const senderStatus = document.querySelector('.sender-status');
          senderStatus.innerHTML = 'Back to normal';
          messagesContainer.insertAdjacentHTML('beforeend', data.message_partial);
          scrollLastMessageIntoView();
        }
      }
    })
    //////////


    //////////
    // Subscribe to the contact's personal channel to be able to send data through it, to notify of type event for ex
    App['user_<%= @contact.id %>'] = App.cable.subscriptions.create({ channel: 'UsersChannel', user_id: <%= @contact.id %> }, {
      received: (data) => {
        // console.log(data);
      },
      sendTypingNotification: function() {
        this.perform('typing', { type: 'typing', sender_id: <%= @user.id %>, recipient_id: <%= @contact.id %>, chat_id: <%= params[:id].to_i %>});
      }
    })

    function broadcastEvent() {
      App['user_<%= @contact.id %>'].sendTypingNotification();
    }

    const input = document.getElementById('redaction-bar')
    input.addEventListener('beforeinput', broadcastEvent)
    //////////

    // Subscribe to current user's own channel to receive data sent over by over users and deal with it
    // Here is where I transform the notification into a graphic 'Typing...' result

    // Shows the 'typing...' notification
    function displayTypingEvent(data) {
      console.log(data);
      const senderStatus = document.querySelector('.sender-status');
      senderStatus.innerHTML = 'typing...';
      window.clearTimeout(window.timeoutHandle);
      window.timeoutHandle = window.setTimeout(function(){
        senderStatus.innerHTML = 'Back to normal';
      },1500);
    }

    App['user_<%= @user.id %>'] = App.cable.subscriptions.create({ channel: 'UsersChannel', user_id: <%= @user.id %> }, {
      received: (data) => {
        if ((data.type === 'typing') && (data.chat_id === <%= @chat.id %>)) {
          displayTypingEvent(data);
        }
      }
    })
  </script>
<% end %>













